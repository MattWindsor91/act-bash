#!/bin/bash
# Copyright (c) 2020 Matt Windsor and contributors
#
# This file is part of act-tester.
# Licenced under the MIT licence; see `LICENSE`.

# Expects to be run in an ACT working directory.
# Runs all of the various single-shot binaries of act-tester in a pipeline, outputting to ./tester_test.

# TODO(@MattWindsor91): make this parametric and more robust.

set -euo pipefail

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly SCRIPTDIR

# shellcheck source=scripts/act_bash/args.sh
source "${SCRIPTDIR}/act_bash/args.sh"
# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"
# shellcheck source=scripts/act_bash/naming.sh
source "${SCRIPTDIR}/act_bash/naming.sh"

## Variables ##

# The name of the output directory.
# If empty, we use a temporary directory.
OUTPUT_DIR=""

# The ID of the machine to run.
MACHINE="localhost"

# The number of times to fuzz.
# If 0, don't fuzz.
FUZZ="0"

## Functions ##

# Prints the script's usage and exits.
usage() {
  echo "usage: $0 [-d DIR] [-f NUM_FUZZ] [-m MACHINE] [-${ACT_STANDARD_FLAGS}] FILES..." >&2
  echo
  echo "-d: directory to use for outputting intermediate files"
  echo "-f: number of cycles to fuzz each subject (0 = don't fuzz)"
  echo "-m: ID of machine to use"
  act::standard_usage

  exit 1
}

# Fuzzes if FUZZ is non-zero; else, passes stdin through unchanged.
maybe_fuzz() {
  if [[ "${FUZZ}" == 0 ]]; then
    cat "$1"
  else
    act::log "Fuzzing %d time(s).\n" "${FUZZ}"
    act-tester-fuzz -d "${OUTPUT_DIR}/fuzz" -k "${FUZZ}" "$1"
  fi
}

# Runs the act-tester pipeline.
run() {
  local plan="${OUTPUT_DIR}/plan.json"
  local fplan="${OUTPUT_DIR}/plan.fuzzed.json"
  local lplan="${OUTPUT_DIR}/plan.lifted.json"
  local oplan="${OUTPUT_DIR}/plan.out.json"

  act-tester-plan -m "${MACHINE}" "$@" > "${plan}"
  maybe_fuzz "${plan}" > "${fplan}"
  act-tester-lift -d "${OUTPUT_DIR}/lift" "${fplan}" > "${lplan}"
  act-tester-rmach -d "${OUTPUT_DIR}/compile" "${lplan}" > "${oplan}"
  act-tester-analyse "${oplan}"
}

# The main function.
main() {
  while getopts "d:f:m:qvx?h" a; do
    case "${a}" in
    d) OUTPUT_DIR="${OPTARG}" ;;
    f) FUZZ="${OPTARG}" ;;
    m) MACHINE="${OPTARG}" ;;
    *) act::parse_standard_args "${a}" "${OPTARG:-}" ;;
    esac
  done
  # VERBOSE etc. are used indirectly by various library functions.
  # shellcheck disable=SC2034
  readonly VERBOSE FUZZ MACHINE
  shift $((OPTIND-1))

  if [[ $# -lt 1 ]]; then act::arg_error "need at least one file argument"; fi
  if [[ ${FUZZ} -lt 0 ]]; then act::arg_error "count must be a non-negative integer"; fi
  if [[ -z ${OUTPUT_DIR} ]]; then act::setup_temp_output_dir; fi
  readonly OUTPUT_DIR

  run "$@"
}

main "$@"
