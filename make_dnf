#!/usr/bin/env bash
# Reads a C litmus test in from the given file, runs it using the given backend,
# generates a DNF postcondition from the resulting states, splices the results
# back into the test, and outputs the new test on stdout.
#
# For usage information, scroll down to the `usage` function.

set -o errexit
set -o pipefail
set -o nounset

SCRIPTDIR="${SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"}"
readonly SCRIPTDIR

# shellcheck source=scripts/act_bash/args.sh
source "${SCRIPTDIR}/act_bash/args.sh"
# shellcheck source=scripts/act_bash/exec.sh
source "${SCRIPTDIR}/act_bash/exec.sh"
# shellcheck source=scripts/act_bash/log.sh
source "${SCRIPTDIR}/act_bash/log.sh"


## Constants and arguments ##


# The backend ID to use to get state sets.
# Can be zero, in which case the `c_states` script gets to decide a default.
BACKEND=""

# The name of the compiler to compile through (using c_litmus_indirect).
# If empty, we don't compile, we just run straight through the backend.
COMPILER=""

# Whether or not we're running ACT programs through `dune exec`.
DUNE_EXEC="false"

# Whether or not verbose logging is enabled.
VERBOSE="false"


## Functions ##


# Prints usage information and exits.
usage() {
  echo "Usage: $0 [-b BACKEND] [-c COMPILER] [-qvxh?] C_TEST"
  echo
  echo "-b: ID of backend to use for checking C files"
  echo "-c: ID of compiler to use (if given, c_litmus_indirect is used)"
  echo "-v/-q: verbose/quiet"
  echo "-x: run ACT binaries with \`dune exec\`"
  echo "-h/-?: usage"
  exit
}


main() {
  while getopts "b:c:qvx?h" a; do
    case ${a} in
    b) BACKEND="${OPTARG}" ;;
    c) COMPILER="${OPTARG}" ;;
    q) VERBOSE="false" ;;
    v) VERBOSE="true" ;;
    x) DUNE_EXEC="true" ;;
    h|?) usage ;;
    esac
  done
  readonly BACKEND COMPILER DUNE_EXEC VERBOSE
  shift $((OPTIND-1))

  act::check_dune_exec
  if [[ $# -ne 1 ]]; then act::arg_error "need precisely one file argument"; fi

  local original_file=$1

  act::log "Making postcondition...\n"

  local postcondition
  postcondition=$(act::run_with_bcqvx "${SCRIPTDIR}/make_dnf_postcondition" "${original_file}")

  act::log "Altering header...\n"

  act::c modify-header -postcondition "${postcondition}" "${original_file}"
}


## Entry point ##
main "${@}"
